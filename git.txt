GIT reference:
- Rename last N commits (via rebase -i): 
	- be on branch to change commit names
	- git rebase -i master
	- write/quit between each screen (:wq) 
  
- Show last 3 commits: 
	- oneline pretty format: git log -3 --pretty=oneline
	- custom pretty format: git log -3 --pretty=format:"%h"
	
- use "git restore <file>" to discard changes in working directory

- Tag a commit:
	- checkout the branch, e.g. `git checkout develop`
	- `git tag -s <version>`
		- e.g. `git tag -s '0.32.0-alpha.0'`
		- the `-s` is to sign the tag
	- `git push origin <version>`
		- e.g. `git push origin '0.32.0-alpha.0'`
	- untag: git push origin :<version>
		- e.g. `git push origin :1.1`
		
- Debug (https://gist.github.com/paolocarrasco/18ca8fe6e63490ae1be23e84a7039374):
	- `GIT_TRACE=1 <git command>`
		- e.g. `GIT_TRACE=1 git commit -m 'my commit message'`

- Display the remote URL:
	- `git config --get remote.origin.url`
	- Also useful: list all the config entries: `git config -l`
	
- Remove a file from the staging area: `git rm --cached <file>`
	- e.g. `git rm --cached pom.xml`
	
- Parent of `HEAD`: `HEAD^` or `HEAD~1`
	- Grandparent: `HEAD^^` or `HEAD~2`
	
- Display branches with last commit: `git branch -v`
	- remote only: add `-r`
	
- Display changes to staged files: `git diff --staged`

- Add a message to the git stash: `git stash save "<message>"`

- Apply a stash from the stash list (does NOT remove it from the list): `git stash apply <stash id>`
	- e.g. `git stash apply stash@{0}`
	
- Show stash changes: `git stash show <stash id>`

- Display remote repos: `git remote -v`

- Fetch only from a particular branch: `git fetch <remote> <branch>`
	- e.g. `git fetch origin my-branch-1`
	- can also use `pull` instead of `fetch`


	
- Other things: https://tapajyoti-bose.medium.com/git-cheat-sheet-with-40-commands-concepts-ab1b9d973e96
