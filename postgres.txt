POSTGRESQL reference:

- psql:
	- run a file on the postgres db: psql -U <username> -h <host> -d <database-name> -f <file to run> -p <port>
		- example: psql -U postgres -h localhost -p 5432 -d mydbname -f myfiletorun.sql
	- connect to database via psql (e.g. inside docker postgres): psql -v --username "$POSTGRES_USER" --dbname "$POSTGRES_DB"
  
- initialize/start database:
	- initdb -D /usr/local/pgsql/data
	- pg_ctl -D /usr/local/pgsql/data -l <logfile> start
		- start with postgres: postgres -D /usr/local/pgsql/data > logfile
    
- Drop NOT NULL constraint:
	alter table <table> alter column <column> drop not null;
- Set NOT NULL constraint:
	ALTER TABLE <table> ALTER COLUMN <column> SET NOT NULL;

- Updates (including populating a newly-created column):
	UPDATE <table> t SET <column> = t.<other-column>;
	- using value from another table: UPDATE join (but no 'join' keyword used)
		UPDATE <table> t1 SET t1.<column> = t2.<column> + 5 FROM <table2> t2 WHERE t1.<foreign-key> = t2.<primary-key>;

- Cheat sheet: https://www.educba.com/postgresql-cheat-sheet/

- WITH <temp table name> AS (<sql here>) SELECT * FROM <table>
	- e.g.: WITH participants AS (
		SELECT identity_uuid FROM x 
		union 
		SELECT identity_uuid FROM y) SELECT * FROM participants;
- left join a on b: right side (i.e. the b side) may have nulls (if any)
	- e.g.: select a.identity_uuid, b.identity_uuid from schema.table_a a left join schema.table_b b on a.identity_uuid = b.identity_uuid;
		- 'a' doesn't have all the identities that b.identity has, but it's a left join so there will be gaps only on the right side (if any). In this case there aren't any
		- if the query were reversed to the 'b' side being first, since only some identities are in the 'b' table, there would be TONS of nulls doing this left join, i.e. (null, <identity_uuid from schema.table_a table>)
	- right join would be opposite of this				   
- generate UUID: uuid_generate_v4()
- JSON stuff: 
	- removes 'display' from the top level when it has a value of ":
		WITH myjson_table AS (
		   SELECT '{"top": 0, "left": 0, "color": {"hex": "black", "cmyk": "black"}, "width": 7, "border": {"top": {"color": {"hex": "black", "cmyk": "black"}, "style": "solid", "width": 0}, "left": {"color": {"hex": "black", "cmyk": "black"}, "style": "solid", "width": 0}, "right": {"color": {"hex": "black", "cmyk": "black"}, "style": "solid", "width": 0}, "bottom": {"color": {"hex": "black", "cmyk": "black"}, "style": "solid", "width": 0}}, "height": 7, "margin": {"top": 0, "left": 0, "right": 0, "bottom": 0}, "display": null, "padding": {"top": 0, "left": 0, "right": 0, "bottom": 0}, "flexGrow": 0, "fontSize": 12, "position": "absolute", "boxSizing": "border-box", "textAlign": "left", "flexShrink": 1, "fontFamily": "Gotham-Book", "lineHeight": "normal", "flexDirection": "row", "letterSpacing": "normal", "textTransform": "none", "backgroundColor": {"hex": "transparent", "cmyk": "transparent"}}'
		      ::jsonb AS col)
		select col, (col - 'display') from myjson_table WHERE col @> '{"display": null}';

- Interval: <tsz> +/- INTERVAL '<timespan>'
	- e.g. SELECT * FROM c WHERE c.created_tsz > (current_timestamp - interval '3 DAYS');
	- Another way to use: select date('2021-11-02') + interval '224 days'
		- result: 2022-06-14 00:00:00.000
- Between symmetric: SELECT a_tsz WHERE a_tsz BETWEEN SYMMETRIC lower_tsz AND higher_tsz;
- MAKE_INTERVAL: SELECT MAKE_INTERVAL(days => mytable.my_value + CASE mytable.my_bool WHEN TRUE
											THEN 0
										      ELSE +7
										      END) FROM mytable;
	- e.g. select MAKE_INTERVAL(days => 5 + CASE TRUE WHEN TRUE
                                              THEN 10
                                           ELSE -10
                                 END - 25) AS result
		- result: '0 years 0 mons -10 days 0 hours 0 mins 0.0 secs'
	
- Create function:
	CREATE OR REPLACE FUNCTION myschema.my_func
	(
		IN i_base_time	TIMESTAMPTZ,
		IN i_offset 	INT
	) RETURNS TIMESTAMPTZ AS
	$BODY$
	SELECT i_base_time + cast(i_offset || ' days' AS INTERVAL);
	$BODY$
	IMMUTABLE
	STRICT
	PARALLEL SAFE
	COST 5
	LANGUAGE SQL;
	
	COMMENT ON FUNCTION myschema.my_func IS 'comment on the function here'

- Casting: two ways: CAST(<val> AS <val type>) or <val>::<val type>
	- SELECT (CAST('2022-06-14' AS DATE)) + interval '1 DAY'
	- SELECT '2022-06-14'::DATE + interval '1 DAY'
	
- Rename column: ALTER TABLE <table> RENAME COLUMN <col> TO <new name>;
	e.g. ALTER TABLE mine RENAME COLUMN my_col TO my_other_col;
- Re-type column: ALTER TABLE <table> ALTER COLUMN <col> TYPE <new type>;
	- e.g. ALTER TABLE mine ALTER COLUMN my_col TYPE VARCHAR(50);
	
- Long-running queries:
	SELECT
		pid,
		now() - pg_stat_activity.query_start AS duration,
		query,
		state
	FROM pg_stat_activity
	WHERE (now() - pg_stat_activity.query_start) > interval '5 minutes';
	
	- see also: https://medium.com/little-programming-joys/finding-and-killing-long-running-queries-on-postgres-7c4f0449e86d

- Stop a running query (like kill -9 !!!): SELECT pg_cancel_backend(__pid__);

- Large tables/indexes:
	SELECT relname, relpages
	FROM pg_class
	ORDER BY relpages DESC;
	
- Concurrency control: https://www.postgresql.org/docs/14/mvcc.html
