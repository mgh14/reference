CMD reference:

- bash cheatsheet: https://devhints.io/bash

### Bash
- arguments:
	- last argument (from last command): !$
	- nth argument (from last command): !:n
		- e.g. !:2
	- all n arguments: !:n-$
		- e.g. !:3-$ for everything after the second word
	- last arg of n commands ago: !-n:$
		- e.g. !-4:$ for the last arg four commands ago
	- strip filename off of folder: !$:h
		- e.g. cd /etc/docker fails, then cd !$:h goes to /etc
	- nth arg of current line: !#:n
		- e.g. echo a b c !#:2 yields 'echo a b c b'

- if:
	if [ ! -z "$MYVAR1" ] && [ ! -z "$MYVAR2"]; then
	<command1>
	elif
	<command2>
	elif
	<command3>
	else
	<command4>
	fi

	if [ ! -z "$MYVAR1" ] && [ "$ENABLED" == "true" ]; then echo "yep"; else echo "no"; fi

- for loop: 
	for i in $(cat ~/Desktop/apps.txt | xargs);
	# for i in cat man tail
	do
	<command>, e.g. echo $i
	done
	- also:
		for (( i=1; i<=5; i++ ))
		do
			<command(s)>
		done
	- for `ls`:
		for f in *.xml; do
		    echo "File -> $f"
		done
		- see:
			- https://superuser.com/questions/31464/looping-through-ls-results-in-bash-shell-script
			- https://unix.stackexchange.com/questions/62660/the-result-of-ls-ls-and-ls
	- see: 
		- https://www.cyberciti.biz/faq/bash-for-loop/
		- https://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html

- copy file from user1 to user2 (user2 has elevated privileges):
	- login as user1
	- sudo su - user2
	- <find file, do stuff with it, whatever>
	- chmod 777 <file>
	- mv <file> /tmp
	- exit
	- (still logged in as user1): cp /tmp/<file> ~/
	- log back in as user2 and rm /tmp/<file>

- redirect all output to file: 2>&1
	- append (as opposed to redirect/overwrite): >>
		E.g.: cat file1.txt >> file2.txt

- xargs parse using comma as end of line, then echo each arg: xargs -E ',' -n1 echo
	- note: -E might just be the mac os cmd, for linux it might be -d
	- Execute 'mv' for each file found: find ./ -name '<name pattern here>' -exec <comand here> \;
	- e.g. find ./ -name '*article*' -exec mv {}  ../backup  \;
		- note: {} represents a found filename
	- OR find ./ -name '*article*' | xargs -I '{}' mv {} ../backup
		- e.g. ls | find . -name "*.json" | xargs -I '{}' mv "{}-e" "{}"

- do-while loop: 
	while true; do
		<command(s)>
		[[ <condition ]] | break 
	done

	- examples:
		while true; do
			du -h myfile.zip;
			sleep 5;
		done

- Arg processing:
	for arg in "$@"
	do
	    case $arg in
		-i|--initialize)
		SHOULD_INITIALIZE=1
		shift # Remove --initialize from processing
		;;
		-c=*|--cache=*)
		CACHE_DIRECTORY="${arg#*=}"
		shift # Remove --cache= from processing
		;;
		-r|--root)
		ROOT_DIRECTORY="$2"
		shift # Remove argument name from processing
		shift # Remove argument value from processing
		;;
		*)
		OTHER_ARGUMENTS+=("$1")
		shift # Remove generic argument from processing
		;;
	    esac
	done

- Return code of previous command: $?
	true
	echo $? # echoes 0
	false
	echo $? # echoes 1

- Incrementing a variable:
	- method 1:
		i=$((i+1))
		((i=i+1))
	- method 2:
		let "i=i+1"
	- method 3:
		i=0
		until [ $i -gt 3 ]
		do
		  echo i: $i
		  ((i=i+1))
		done

- Generate a random number (https://linuxhint.com/generate-random-number-bash/):
	- /dev/urandom: `od -A n -t d -N 1 /dev/urandom`
		- generates a number between 0 and 255
	- echo $RANDOM
		- generates a number between 0 and 32767
	- echo $(( $RANDOM % <range high> + <range low> ))
		- e.g. `echo $(( $RANDOM % 40 + 10 ))`
			- generates a number between 10 (range low) and 40 (range high)

- Resolve relative paths (like ./ and ../): $(readlink -f <path>)
	- e.g. `echo $(readlink -f '../../../././my-directory/./my-file.txt')`
	- e.g. `echo $(readlink -f '../../')`

- String comparisons (https://linuxize.com/post/how-to-compare-strings-in-bash/):
	- exact matches: `if [[ <my var> == "<my value>" ]]; then echo "yep" fi
		- e.g.:
			`string="my string"`
			`if [[ $string == "my string2" ]]; then echo "found"; else echo "nope"; fi`
				- outputs `nope`
	- wildcard matches: `[[ <my var> == *"<my value>"* ]]`
		- e.g.: 
			`if [[ $string == *" str"* ]]; then echo "found"; else echo "nope"; fi`
				- outputs `found`
			`if [[ $string == *" string" ]]; then echo "found"; else echo "nope"; fi`
				- outputs `found`
			`if [[ $string == " string"* ]]; then echo "found"; else echo "nope"; fi`
				- outputs `nope` because no wildcard char is at the front of `" string"*`
	- regex matches: `[[ <my var> =~ "<my value>" ]]`
		- e.g.:
			`if [[ $string =~ "[A-Za-z ]+ string" ]]; then echo "found"; else echo "nope"; fi`
				- outputs `found`
			`if [[ $string =~ "my stri{2,}ng" ]]; then echo "found"; else echo "nope"; fi`
				- outputs `nope` because there aren't 2 or more 'i' chars in 'string'

- To go back to the previous working directory: `cd -`					
- See who's logged in: w
- Add line numbers to input/file: nl
	- e.g. `w | nl`
- Permissions in octal form: `stat -c '%A %a %n' <file>`
- Tabs to spaces (or vice versa): expand or unexpand
	- e.g. `echo "a\tb" | unexpand` yields `a	b`
- For binary files, `strings` (plus grep, etc.) lets you find bits of text
- The output of a command can be treated like a file via <(some command) (known as process substitution).
	- e.g. `diff /etc/hosts <(ssh somehost cat /etc/hosts)`
- Folding text: use `fold`
	- e.g. `echo "abcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfiqqiowueroiqwupeoriuqpweoiruqpwoeietupweroirtupwoeirutpoiqweuprioquweptoriuqtrepoiuqpiorupwoiertupweoirtupwoieruptuwoierupotiwure" | fold`
		- result:
			abcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjf
			abcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjfabcdefgijalskdjf
			iqqiowueroiqwupeoriuqpweoiruqpwoeietupweroirtupwoeirutpoiqweuprioquweptoriuqtrep
			oiuqpiorupwoiertupweoirtupwoieruptuwoierupotiwure
- Do something in different directory: `(cd <different dir> && <cmd>)`
	- e.g. `(cd ~.git && ls)`
		- Note: still in the original directory after executing

- Arrays:	
	- Array slicing (https://www.gnu.org/software/bash/manual/bash.htmlShell-Parameter-Expansion):
		# See the [Parameter Expansion][1] section in the Bash `man` page.
		# `A[@]` returns the contents of the array, `:1:2` takes a slice of
		# length 2, starting at index 1.

		A=( foo bar "a  b c" 42 )
		B=("${A[@]:1:2}")
		C=("${A[@]:1}")       # slice to the end of the array
		echo "${B[@]}"        # bar a  b c
		echo "${B[1]}"        # a  b c
		echo "${C[@]}"        # bar a  b c 42
		echo "${C[@]: -2:2}"  # a  b c 42 # The space before the - is necesssary
	- Array length: `${#ArrayName[@]}`, e.g. `echo ${#my_array[@]}`
		- https://www.cyberciti.biz/faq/finding-bash-shell-array-length-elements/

- Check for empty variable: if [ -z ${var+x} ]; then echo "var is unset"; else echo "var is set to '$var'"; fi
	- "where ${var+x} is a parameter expansion which evaluates to nothing if var is unset, and substitutes the string x otherwise."
	- also: `if [-n "$1"]; then echo "yes" else echo "no" fi`
	- https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash

- Calling a bash function: 
	- Declare function in a file, say `file.sh`: `function (talk) { echo "hi!" }`
	- From cmd line: `source file.sh; talk`
	- From another script: same, put it on two separate lines though
	- https://superuser.com/questions/106272/how-to-call-bash-functions

- Return value from bash function:
	- inside function: `echo $returnValue`
		- e.g.:
			function F2()
			{
				local retval='Using BASH Function'
				echo "$retval"
			}
			# outside of function:
			getval=$(F2)
			echo $getval

	- for an integer (0 success, non-zero for otherwise): `return X`
		- e.g.:
			function F4() {
				echo 'Bash Return Statement'
				return 35
			}
			# outside of function:
			F4
			echo "Return value of the function is $?"

- Pass all args to the bash function you're calling: `<func> "$@" "next command" "next next command" "etc."`

- Check if file exists:
	if [ ! -f /path/to/file ] then
	    echo "File does not exist in Bash"
	else
	    echo "File found. Do something meaningful here"
	fi
	- other file conditions: https://www.cyberciti.biz/faq/bash-check-if-file-does-not-exist-linux-unix/

- Get parts of file (https://stackoverflow.com/questions/23162299/how-to-get-the-last-part-of-dirname-in-bash):
	- directory name: `$(dirname '/from/here/to/there.txt/')` yields `/from/here/to`
		- also:
			`file=/path/to/file.txt`
			`echo ${file%/*}`
	- file name: `$(basename '/from/here/to/there.txt/')` yields 'there.txt'

- Check that file is empty (https://tecadmin.net/bash-script-check-if-file-is-empty-or-not/): 
	`[ -z "$(cat filename.txt)" ]; then
		echo "file is empty"
	 else
		echo "file is not empty"
	 fi`
	
- Colors and Formatting (https://misc.flogisoft.com/bash/tip_colors_and_formatting):
	- escape: \e

### Cmd Utilities

- ls:
	- list by date order: `-t`
		- e.g. `ls -t *.txt`
		- 'Time last modified'
		- see https://www.zerotouch.com/faqs/111/ls-by-date

- date:
	- convert timestamp to date (Mac): `date -r <timestamp>`
		- use `-u` for UTC time
		- e.g. `date -r 1267619929 -u`
		- see https://stackoverflow.com/questions/2371248/how-to-convert-timestamps-to-dates-in-bash
			- one-liner cross-platform: `date -d @1267619929 2>/dev/null || date -r 1267619929`
	- get current timestamp: `echo $(date +%s)`
		- https://stackoverflow.com/questions/17066250/create-timestamp-variable-in-bash-script
	- date formatting options (https://www.tutorialkart.com/bash-shell-scripting/bash-date-format-options-examples/#gsc.tab=0):
		Text |	Description				 | Example
		----------------------------------------------------------
		%a   |	Weekday					 | Mon
		%A   |	Weekday					 | Monday
		%b   |	Month					 | Jan
		%B   |	Month					 | January
		%d   |	Day					 | 04
		%D   |	Date as MM/DD/YY			 | 04/15/24
		%F   |	Date as YYYY-MM-DD			 | 2024-04-15
		%H   |	Hour (24)				 | 18
		%I   |	Hour (12)				 | 10
		%j   |	Day (001..366)				 | 152
		%m   |	Month (01..12)				 | 05
		%M   |	Minutes					 | 52
		%S   |	Seconds					 | 18
		%T   |	Time as HH:MM:SS			 | 15:28:59
		%u   |	Day (1..7)				 | 7
		%U   |	Week (00..53)				 | 23
		%Y   |	Year					 | 2018
		%Z   |	Timezone (abbrev.)			 | GMT

		- Example command: `date '+%D --- %T'` yields `04/15/24 --- 15:32:13`

- find:
	- execute command for each result: find /path/to/start -type f -name "*.plist" -exec sed -i -e 's/SEARCH/REPLACE/g' \;
		- another example: find . -name "*.jar" -exec echo {} \;
			- The {} portion of this command represents the found filename, I believe
			- Note that the semicolon after -exec needs to be escaped
		- https://www.baeldung.com/linux/find-exec-command
	- delete all found files: find . -name "*.txt" -delete

grep:
	- extended regexp, -E
		- (look for ');' at the end of each line): grep -E ");$" file.txt 
	- show line numbers: -n
		grep -n "abc" file.txt
	- count instances: -c
		grep -c "abc" file.txt
	- include/exclude file: --include or --exclude
		grep --exclude "*.sql" "abc" file.sql
		- grep recursively, filtering on filename: grep -r "string" --include="*.php" .
		- include/exclude directory: --include-dir --exclude-dir
			- e.g. grep --exclude-dir={dir1,dir2,dir3} 
		- NOTE: excludes TAKE PRECIDENCE OVER INCLUDES!!!
		- https://stackoverflow.com/questions/6565471/how-can-i-exclude-directories-from-grep-r
	- Don't search devices, FIFOs, sockets: -D skip
		grep -R -D skip "abc" /
	- Don't print filename: -h
	- MULTIPLE PATTERNS!!! -e
		grep -e "^abc.+" -e "^otherpattern.+" file.txt
		- for multiple NOTs, use -ve for each:
			grep -E -ve ";$" -ve "uigznaosy" -ve "--" -ve "^\s*$" -ve "^ALTER TABLE ONLY" -ve "\s+at org\.springframework" dev-core-db-dump-2-sep-2021.sql
		- Positive match uses of -e function as OR's, not AND's:
			grep -E -e "--" -e "^\s*$" -m 10 dev-core-db-dump-2-sep-2021.sql | grep -E -e "-- Dumped" -e "-- PostgreSQL database dump"
				- this returns instances of lines with only ONE of the above final grep's -e pattern matched
	- Ignore binary files: -I
	- List only the names of files not containing selected lines: -L
	- List files with matches, only searching until first instance INSIDE THE FILE is found: -l 
		- (lowercase L)
		- i.e. still lists multiple files, in other words list every file that has at least one match
	- Max count/number of matches: -m
	- Only show matching part of line: -o 
	- Run silent, i.e. nonexistent or unreadable files ignored (messages suppressed): -s
	- Line regexp, Only input lines selected against an entire fixed string or regular expression are considered to be matching lines: -x
	- The expression is searched for as a word (as if surrounded by `[[:<:]]' and `[[:>:]]'; see re_format(7)): -w
	- Prints a zero-byte after the file name: --null
			
- scp:
	- General: scp <local file> <host>:<remote location>
		- e.g. localfile.txt a-mile-app-port-1.qa.octanner.net:./
	- Specify SSH user: -o "User=<USER-HERE>", e.g. "User=matt.hess@octanner.com"
		scp -o "User=<USER-HERE>@octanner.com" eclientlink2-21.06.01b-custom.war a-mile-app-port-1.qa.octanner.net:./
	- Using a specific SSH key: `scp -o "User=<USER-HERE>" -i <path to private key file> <local file> <host>:<remote location>
		- e.g. `scp -o "User=matt_hess" -i /Users/matthess/.ssh/my-special-key my-file.txt 1.1.1.1:./
    
- type: 
	- finds a program: type <command>, e.g. type java

- lsof:
	- find the process using a port: lsof -i :<port>
		- e.g. lsof -i :8080
	- find ALL the ports used by a single pid: lsof -i -P | grep <pid>
		- e.g. lsof -i -P | grep 86859
    
- nl: number the lines in a file: nl <file>
	- The -s option is for formatting, e.g. nl -s ".,formatme, " <file> yields line numbers of the form "1.,formatme, <line1>", "2.,formatme, <line2>", etc.
	- format ALL lines (include blanks): -b a 
		- e.g.: nl -b a <file>
	- Only number lines matching expression: -p<expression>
		- e.g.: 
	- Start numbering at given number: -v<number>
		- e.g.: nl -v 100 <filename>
    
- sed: global string replacement: sed -i -e 's/<PATTERN>/<REPLACEMENT>/g' <filename>
	sed -i -e 's/);$/ /g' 1.sql
	- e.g. replace all end of line ); with ),: sed -i -e 's/);$/),/g' 2.sql
	
	- print to stdout instead of replacing file: remove the '-i' part, e.g. sed -e 's/PATTERN/REPLACE/g' hello.txt
	
	- Reference groups/subexpressions: use \# (starting at 1), e.g. \1 or \2
		- eg: `sed 's/(a*)(b*)/\2\1/g' hello.txt` 
			- swaps all the A's and B's in the file
			- see https://www.gnu.org/software/sed/manual/html_node/Back_002dreferences-and-Subexpressions.html
	
	- Specify multiple operations: use the `-e` flag multiple times
		- e.g.: `sed -e 's/s1/s_1/g' -e 's/s2/s_2/' hello.txt`

	- Extended regex notation: -E
		- Note: the + doesn't seem to work, just use the '*' character

	- Specify the extension of the backup file (if using -i): -I {extension}
		- e.g.: `sed -Ibakup 's/a/b/g' hello.txt`
  
- mkdir:
	- check if directory already exists, and if not, create path to it: mkdir -p <path>
		- e.g. mkdir -p /a/b/c/d if a and b both exist, c and d will both be created
    
- jot: print sequential or random chars to the screen? 
	- e.g. jot -c 128 0
  
- echo: 
	- use -n to not echo the newline
	- use -e to use backslash chars?
		- otherwise echo "\n" literally prints "\n", not outputs a new line
	- see https://www.tecmint.com/echo-command-in-linux/ for details
  
- run process in background: <command> &
	- e.g. echo "abc" &
  
- CRON STRINGS:
	- https://freeformatter.com/cron-expression-generator-quartz.html
	
- wget:
	- continue download: wget --continue https://example.com/linux-distro.iso
	- check short URL: wget --max-redirect 0 "https://bit.ly/2yDyS4T"
	
- curl:
	- data-binary upload: curl -X POST --data-binary "@<filename-here>" <url-here>
		- e.g.: curl -X PUT --data-binary "@image2.jpg" "https://mydomain.com/upload"
	- Another way to upload: cat <file> | curl -X PUT -v -H "Content-Type: <content-type>" --data-binary @- "uploadURL": "<url>"
		- e.g.: cat "Titillium-Light.otf" | curl -X PUT -v -H "Content-Type: font/otf" --data-binary @- "uploadURL": "https://fontproxy.io/0306342d-6d26-4f63-87bb-869af889b57d?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20211029T231906Z&X-Amz-SignedHeaders=content-type%3Bhost&X-Amz-Expires=300&X-Amz-Credential=AKIA4SVW6KK4RHD2ZBJS%2F20211029%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=7f0dafff5d8e4360a984677cb5bc00a330cfc4227f7bf6bc673f8e80354184b0"
	
- hexdump: hexdump <file>

- du: du <directory> 
	- note: directory can be blank, i.e. `du`
	- -sh: show total disk usage of current dir (in human-friendly format)
	- -a: show disk usage of all files/folders in dir
	- -m: counts everything in megabyte blocks
	- exclusion: --exclude="*.txt"
	
- sleep:
	- sleep <num-seconds>
		- e.g. sleep 5
			- sleeps for 5 seconds
			- NOT milliseconds
			
- ln (symlinks): ln [-s] /path/to/original /path/to/link
	- Use -s for soft/standard
	- Soft links don't work anymore if the original file gets moved

- gpg:
	- for help: `gpg --dump-options`
	- the `-v`, `--debug`, and `--debug-all` options
	- list keys: `gpg --list-keys`
		- private keys: `gpg --list-secret-keys`
	- the `--dry-run` option will simulate what happens
	- home dir is `$HOME/.gnupg`
	- sign with default key: `gpg -s <file to sign>`
		- sign with specific (local) key: `gpg -s --local-user=<key id> <file to sign>`
			- e.g. `gpg -s --local-user=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA file-to-sign.txt`
	- test signing: `echo "test" | gpg --clearsign -v` 

- ssh-keygen:
	- Generate a key: `ssh-keygen -t ed25519 -f "$HOME/Downloads/id_ed25519" -m [ PEM | PKCS8 | RFC4716 ]`

- ssh:
	- Login user: `-l "<user-here>"`
	- Use a specific private key: `ssh -o "IdentitiesOnly=yes" -i <private key filename> <hostname>`

- watch/time alternative: `while true; do <cmd>; sleep 5; done`

- nohup (https://phoenixnap.com/kb/linux-nohup):
	- Run in foreground (just outputs to nohup.out): `nohup <cmd>`
	- Run in background: `nohup <cmd> &`
		- to bring background to foreground, type `fg`
	- Use `-c` for multiple commands: `nohup <bin file> -c '<cmd1> && <cmd2>'

- Making sounds:
	- `tput bel`
	- `say "word"` # most words probably work here
	- `printf "\a"`

date:


head: 
	- Show first n lines of file (https://www.cyberciti.biz/faq/unix-linux-show-first-10-20-lines-of-file/): 
		`head -<number> <file>`
			- e.g. `head -10 myfile.txt`

### Other Tips

- Strip newline character: `tr -d '\n'`, e.g. `echo "123\n" | tr -d '\n' | pbcopy`
	- see https://stackoverflow.com/questions/3482289/easiest-way-to-strip-newline-character-from-input-string-in-pasteboard

- Brace expansion using {...} can reduce having to re-type similar text and automate combinations of items. This is helpful in examples like mv foo.{txt,pdf} some-dir (which moves both files), cp somefile{,.bak} (which expands to cp somefile somefile.bak) or mkdir -p test-{a,b,c}/subtest-{1,2,3} (which expands all possible combinations and creates a directory tree). Brace expansion is performed before any other expansion.

- As the man page says, rsync really is a fast and extraordinarily versatile file copying tool. It's known for synchronizing between machines but is equally useful locally. When security restrictions allow, using rsync instead of scp allows recovery of a transfer without restarting from scratch. It also is among the fastest ways to delete large numbers of files: `mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir`

- In Bash scripts, use set -x (or the variant set -v, which logs raw input, including unexpanded variables and comments) for debugging output. Use strict modes unless you have a good reason not to: Use set -e to abort on errors (nonzero exit code). Use set -u to detect unset variable usages. Consider set -o pipefail too, to abort on errors within pipes (though read up on it more if you do, as this topic is a bit subtle). For more involved scripts, also use trap on EXIT or ERR. A useful habit is to start a script like this, which will make it detect and abort on common errors and print a message:
      `set -euo pipefail`
      `trap "echo 'error: Script failed: see failed command above'" ERR`

- Best practices: https://sharats.me/posts/shell-script-best-practices/
