GRADLE:

- Skip tests (and other things, like linting): -x test
	- e.g.: ./gradlew build -x test -x pmd -x lint
- Run without caching:
	- delete `$HOME/.gradle`
	- Run `./gradlew --no-daemon no-configuration-cache --no-build-cache <task>`, e.g. `./gradlew --no-daemon --no-build-cache assemble`
	- others: --no-parallel, no-scan, no-watch-fs
- Run in debug: `--debug` or `-d`
	- e.g.: `./gradlew build --debug`
	- another param for more output: --console [plain | auto | rich | verbose]
- Run with tasks disabled/dry-run: `--dry-run` or `-m`
	
DEPENDENCIES:
- find unused dependencies (in build.gradle file):
	plugins {
		id "nebula.lint" version "17.7.0"
	}
	- command: `gradle lintGradle -PgradleLint.rules=unused-dependency`
	
- exclude a dependency:
  configurations {
      implementation {
          exclude group: 'org.mockito', module: 'mockito-junit-jupiter'
      }
  }
  
- see all dependencies of a project (does NOT grab subprojects in the folder!):
	- `./gradlew dependencies --configuration < runtimeClasspath | implementation | compileClasspath | (etcâ€¦) >
		- e.g. `./gradlew dependencies --configuration runtimeClasspath`
		
- dependency report:
	plugins {
    		id 'project-report'
	}
	- command: `gradle dependencyReport` (or `htmlDependencyReport`)
	
- configure a subproject that can't find another subproject's tasks:
	- first:
	configurations {
	    evaluationDependsOn(":subproject1:subproject2")
	}
	- then add: 
	tasks.shadowJar {
		dependsOn(project(":project1:project2").tasks.jar) // or whatever other task besides 'jar' 
	}

BUILD FILE:
- naming a jar:
  jar {
	  archivesBaseName = 'my-app-name-here'
  }
 
TASKS:
- disable a task:	<taskname>.enabled = false
	e.g.: tasks.jar.enabled = false

- only run a task if (condition): <task>.onlyIf { <condition> }
	e.g.: myTask.onlyIf { !project.hasProperty('skipMyTask') }
	- can also use <task>.doFirst { throw new StopExecutionException() } (?)
	
- Make a task depend on another:
	tasks.jar {
		dependsOn(project(":subproject1:subproject2").tasks.jar)
	}
	
