DOCKER reference:

- get into a container's shell: sudo docker run -it --entrypoint /bin/bash [docker_image]
	- also: adding --rm makes it a temporary container :D 
		sudo docker run --rm -it <rest of command...>
	- attach to running container, but run sh: docker exec -it 077d /bin/sh
- https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/
	- RUN is an image build step; CMD is the command the container executes by default
		- CMD can be overridden 
- See usage: docker system df -v
- Docker inspections: docker inspect <container|image|network|OTHERS?>
- Real docker cleans:
	- docker image prune
	- docker run --privileged --pid=host docker/desktop-reclaim-space
	- docker system prune
	- see https://docs.docker.com/docker-for-mac/space/
- copy file:
	- docker cp foo.txt mycontainer:/foo.txt
- build with tag: docker build -t <tag name> <directory>
	- docker build -t ccybdev-data .
- in image build, run multiple commands with single RUN: &&\
	- e.g.: RUN mkdir -p /folder/to/make &&\
					chown postgres /folder/to/make &&\
					cd /folder/to/make
- expose port (run command): -p<port1>:<port2>, e.g. -p5432:2345
	- port1: HOST port (i.e. my machine)
	- port2: CONTAINER port (docker's port)
	- note: -P (capital p) will map the exposed port to a random port on the host interface (my machine)
- network commands:
	- show docker networks: docker network ls
		- default is 'bridge' on Macs
	- inspect docker network: docker network inspect <network name>, e.g. docker network inspect bridge
	- get a container's IP address: 
		docker container inspect -f '{{ .NetworkSettings.IPAddress }}' <CONTAINER_ID_OR_NAME>
	- connect a container to a network: docker network connect <network name> <container instance id>
	- Notes:
		- inside a container, you can use the network name as the domain name (like localhost), e.g. "jdbc:mysql://<network-name-here>/myDB" and it will resolve correctly
			- supposedly can also do this when naming a docker compose service??
		- best practice: create a network for containers to connect to instead of relying on the default network
	- in docker compose yaml:
		- "build: ." will look in current directory and build the container before starting
	- docker compose automatically creates a bridge network and attaches the containers in the compose file to it

- tagging: docker tag SOURCE_IMAGE[:TAG] <tag-name>
	- assume image e76925554e77: docker tag e76925554e77 harbor.octanner.io/developer/cc-yb-api-dev-data:v26jan2022
- buildx: ???
	- e.g. docker buildx build --no-cache --progress=plain -t content-api -f Dockerfile .
- Use an environment file: --env-file <name>
	- e.g. docker run --env-file 'myEnv.env' 01923809as09d
- "Builder" dockerfile:
	FROM openjdk:18 as builder
	...
	RUN ./gradlew clean build -x test

	FROM openjdk:18
	WORKDIR /app
	COPY --from=builder /app/build/myjar.jar app.jar
	CMD java $JAVA_OPTS $SPRING_OPTS -Dspring.profiles.active="$SPRING_PROFILES" -jar app.jar
	
- Export current container (with all changes) as tar, then import as an image:
	- step 1: docker export <container ID> -o <tar filename>
		- e.g. docker export e2b08d5ff214 -o ~/Downloads/my-app.tar
	- step 2: docker import <tar filename> <tag:version>
		- e.g. docker import ~/Downloads/my-app.tar my-app:v2.5
		
- Container subcommand: `docker container [attach | commit | cp | diff | inspect | kill | logs | pause | port | prune | restart | stats | stop | top]`
	- Note: there are other sub-commands of `container` too
	
- Docker ENGINE log locations (https://docs.docker.com/config/daemon/logs/):
	- `dockerd`: ~/Library/Containers/com.docker.docker/Data/log/vm/dockerd.log
	- `containerd`: ~/Library/Containers/com.docker.docker/Data/log/vm/containerd.log

DEBUGGING:
- Inspect a container: `docker container inspect <container ID>`
- Check which ports are mapped for a container: `docker port test`
- Top processes of a container: `docker top <container ID>`
- Pause a container: `docker pause <container ID>`
- Save a container to a tar: `docker save <container ID> [<container ID>]`
- Commit changes from image to container state of a running container: `docker commit <container ID> [REPOSITORY[:TAG]]`
