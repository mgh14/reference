JAVA reference:

- Debugging string: -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:1044
- Debug SSL issues: -Djavax.net.debug=ssl:record:plaintext
- Use TLS: -Djdk.tls.client.protocols=TLSv1,TLSv1.1,TLSv1.2 (VM ARGUMENT)
- JMX:
	- https://docs.oracle.com/javadb/10.10.1.2/adminguide/radminjmxenabledisable.html
	- https://docs.oracle.com/javase/7/docs/technotes/guides/management/agent.html#gdeum
	- in docker: https://github.com/cstroe/java-jmx-in-docker-sample-app/blob/master/README.md
	- start app with jmx enabled (put these in the java start cmd):
		-Dcom.sun.management.jmxremote
		-Dcom.sun.management.jmxremote.port=9010
		-Dcom.sun.management.jmxremote.local.only=false
		-Dcom.sun.management.jmxremote.authenticate=false
		-Dcom.sun.management.jmxremote.ssl=false
- For implementing a stream: <...>.sorted(Comparator.comparing(new Function<stream target object, OBJECT TYPE TO COMPARE>() {...}))
- Capturing heap dumps: 7 ways (https://blog.heaphero.io/2017/10/13/how-to-capture-java-heap-dumps-7-options/)
- Read file:
	  private static String readFromInputStream(InputStream inputStream) throws IOException {
	    StringBuilder resultStringBuilder = new StringBuilder();
	    try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {
	      String line;
	      while ((line = br.readLine()) != null) {
	        resultStringBuilder.append(line).append("\n");
	      }
	    }
	    return resultStringBuilder.toString();
	  }
- Write file:
	BufferedWriter writer = new BufferedWriter(new FileWriter("mydoc"));
	writer.write(documentContent);
- run jstat:
	- experimental :(
	jstat -gcutil -h3 -t <pid> 250
		- the -t adds a timestamp
		- -h3 prints out column headers/names every three seconds
		- 250 is the sampling rate (in milliseconds), i.e. one sample every 250 milliseconds
	- -gcutil option column meanings:
		- S0 	Survivor space 0 utilization as a percentage of the space's current capacity.
		- S1 	Survivor space 1 utilization as a percentage of the space's current capacity.
		- E 	Eden space utilization as a percentage of the space's current capacity.
		- O 	Old space utilization as a percentage of the space's current capacity.
		- M 	Metaspace utilization as a percentage of the space's current capacity.
		- YGC 	Number of young generation GC events.
		- YGCT 	Young generation garbage collection time.
		- FGC 	Number of full GC events.
		- FGCT 	Full garbage collection time.
		- GCT 	Total garbage collection time.
    
- thread dumps: jstack
	- experimental :(((
	- jstack <pid> > threads.txt
  
- get all running java processes: jps
	- experimental :(((
	- jps <pid>
  
- jmap (jmap - print details of a specified process):
	- experimental :(((
	jmap -dump[:dump_options] <pid>
	jmap -histo[:live]
  
- jconsole (a version of visualvm): graphical tool, can have some but usually not any cmd line args

- jcmd (NOT experimental, hooray!!):
	jcmd <pid> "GC.class_histogram"
	jcmd <pid> "GC.heap_dump '/Users/matt.hess/Downloads/out.hprof'"
	jcmd <pid> "GC.heap_info"
	jcmd <pid> "GC.run"
	jcmd <pid> "JFR.start"
	jcmd <pid> "Thread.print"
	jcmd <pid> "VM.classloader_stats"
	jcmd <pid> "VM.class_hierarchy"
	jcmd <pid> "VM.command_line"
	jcmd <pid> "VM.info"
	jcmd <pid> "VM.flags"
	jcmd <pid> "VM.native_memory"
	jcmd <pid> "VM.system_properties"
  
- javap: disassemble class files to view bytecode
	- usage: javap [-v] path/to/classfile.class

- the duration of a Minor GC is reliant not on the size of the heap, but on the number of objects that survive the collection. That means that for applications that mostly create short-lived objects, increasing the size of the young generation can actually reduce both GC duration and frequency. However, if increasing the size of the young generation will lead to a significant increase in objects needing to be copied in survivor spaces, GC pauses will take longer leading to increased latency.

- the best results can be achieved by providing the collection with its expected size upon construction.

- Comparing the class of a variable to a known class: MyClass.class.isAssignableFrom(variable.getClass())
	- This means variable.getClass() would be an instance of MyClass OR still assignable as a parent type
- Jars (see https://docs.oracle.com/javase/tutorial/deployment/jar/basicsindex.html):	
	- Unarchive a jar (or specific files): jar xf <jar> [file1 file2 file3]
		- e.g.: jar xf MyJar.jar
		- e.g.: jar xf MyJar.java JavaFileInJar.java TxtFileInJar.txt
		- Use an unzip utility (a jar is a zipped file)
	- View contents: jar tf <jar> [file1 file2 file3]
		- e.g.: jar tf MyJar.jar MANIFEST.mf
	
- Reflection:
	- get a field's value: AnyClass.class.getField("fieldName").get(null);
	
- Get input arguments outside of main(): ManagementFactory.getRuntimeMXBean().getInputArguments();

- Get file system separator:
	- io package: File.separator
	- nio package: FileSystems.getDefault().getSeparator()
	
- Print out all stack traces in an application: Thread.getAllStackTraces().get(((HashMap) Thread.getAllStackTraces()).keySet().iterator().next())

- Locale miscs:
	- Locale.getISO2Table(LocaleISOData.isoCountryTable)
	- Locale.getISO3Code("", "")
	- Locale.getISOCountries()
	- Locale.IsoCountryData
	
- KeyPairGenerator:
	KeyPairGenerator kpg = KeyPairGenerator.getInstance("Ed25519");
	KeyPair kp = kpg.generateKeyPair();
	new String(Hex.encode(kp.getPrivate().getEncoded()))
	
- Declare a byte array via hex: new byte[] { (byte) 0x00, (byte) 0x2b, (byte) 0x3c }

- Get current working directory (https://stackoverflow.com/questions/4871051/how-to-get-the-current-working-directory-in-java):
	Path currentRelativePath = Paths.get("");
	String s = currentRelativePath.toAbsolutePath().toString();
	System.out.println("Current absolute path is: " + s);

---------------------------------------------------------------------------------
SPRING:
- Parameterized type reference with use of RestTemplate: new ParameterizedTypeReference<List<ScheduledCelebrationAction>>() {};
	val requestEntity = new HttpEntity<>(getHeaders());
    val typeInstance = new ParameterizedTypeReference<List<ScheduledCelebrationAction>>() {};
    val url =
        UriComponentsBuilder.fromUriString(baseUrl)
            .path("batchDetails/getDetailsForCelebration")
            .queryParam("celebrationId", celebrationId)
            .queryParam("assumedTime", Instant.now().toString())
            .build()
            .toUriString();

    ResponseEntity<List<ScheduledCelebrationAction>> response =
        restTemplate.exchange(url, HttpMethod.GET, requestEntity, typeInstance);
    return response.getBody();
- spring configures auto configurations AFTER custom, project configurations!!!
- flyway schema history table name: flyway_schema_history
- Manual transaction manager for component tests: 
	@Autowired 
	org.springframework.transaction.PlatformTransactionManager transactionManager;

	- start/end transaction:
		var status = transactionManager.getTransaction(TransactionDefinition.withDefaults());
		...
		transactionManager.commit(status);

- Exclude auto configs from @SpringBootTest:
	@EnableAutoConfiguration(exclude = GraphQLJavaToolsAutoConfiguration.class)

- Spring actuator:
	- -Dmanagement.endpoints.web.exposure.include=health,mappings -Dmanagement.endpoint.mappings.enabled=true
	- also: https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.enabling
---------------------------------------------------------------------------------
MAVEN:
- run specific test: -D<test-name>, e.g. -Dtest="MyUnitTestClass" OR e.g. -Dtest="MyUnitTestclass#myUnitTestMethod"
- local repo: -Dmaven.repo.local=.m2/repository
- Resume from param: -rf :<module>, e.g. ./mvn clean install -rf :BlockBrochure
- Project list: -pl :<module>, e.g. mvn clean install -pl :BlockBrochure
- Also make: -am, e.g. ./mvn clean install -pl :BlockBrochure -am
	- "If project list is specified, also build projects required by the list"
- help: mvn -h
- fail at end: -fae 
	- "allow all non-impacted builds to continue"
- log file for build output: -l 
- Errors and debug: -X -e
- Debug maven build itself: mvnDebug
	- will require attaching a debugger on port 8000
- running a specific plugin: mvn <groupId>:<artifactId>:<version>:<goal> 
	e.g. com.coveo:fmt-maven-plugin:2.9:format
	- dependency tree: org.apache.maven.plugins:maven-dependency-plugin:3.3.0:tree
		- note: use -DoutputFile=fileNameHere.txt to put to a file
- remove all the "downloading" messages (since v3.6.1): -ntp
- skip various:
	-Dfmt.skip: skip formatting (formatting plugin)
	-Dpmd.skip: skip PMD (PMD plugin)
- verion 3.6.1: add -ntp to skip all the "downloading" messages
	- another way: 
		RUN ./mvnw package --batch-mode -s settings.xml -DskipTests -Dmaven.test.skip=true -Djacoco.skip=true -Dpmd.skip -Dfmt.skip -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
- Effective pom: mvn help:effective-pom -Doutput=out.log -Dverbose=true
- Identify unneeded dependencies: `mvn dependency:analyze -DignoreNonCompile`
---------------------------------------------------------------------------------
TESTING/JUNIT:
- Parameterized test example:
    @CsvSource({
        "string1.1,string2.1",
        "string1.2,string2,2",
        "-2,Argument literal='-2' is not a valid range literal",
        "123-,Argument literal='123-' is not a valid range literal"
    })
    @ParameterizedTest
    void rejectsInvalidRanges(String literal, String iaeMsg) {
    }

- Mockito argument captor (https://www.baeldung.com/mockito-argumentcaptor):
	@Captor
	ArgumentCaptor<Email> emailCaptor;
	
	@Test
	void test() {
	  // ... 
	  verify(mockedObj).deliver(emailCaptor.capture());
	  Email value = emailCaptor.getValue();
	}
